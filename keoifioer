#include <WiFi.h>
#include <WebServer.h>

// Network credentials
const char* ssid = "ESP32-Access-Point";
const char* password = "12345678";

// Relay pins
const int relay1 = 26;
const int relay2 = 27;
const int relay3 = 32; // Added Relay 3
const int relay4 = 33; // Added Relay 4


const int 

WebServer server(80);


void setup() {
  Serial.begin(115200);
  
  // Initialize ESP32 as an Access Point
  WiFi.softAP(ssid, password);
  
  // Print the ESP32 IP address
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP Address: ");
  Serial.println(IP);

  // Define server routes
  server.on("/", handleRoot);
  server.on("/sensor-data", handleSensorData);
  server.on("/control", handleControl);
  server.on("/relay1-toggle", handleToggleRelay1);
  server.on("/relay2-toggle", handleToggleRelay2);
  server.on("/relay3-toggle", handleToggleRelay3);
  server.on("/relay4-toggle", handleToggleRelay4);
  server.on("/motor-left", handleMotorLeft);
  server.on("/motor-right", handleMotorRight);
  server.on("/motor-off", handleMotorOff);

  // Start the server
  server.begin();

  // Initialize relay pins
  pinMode(relay1, OUTPUT);
  digitalWrite(relay1, LOW);
  pinMode(relay2, OUTPUT);
  digitalWrite(relay2, LOW);
  pinMode(relay3, OUTPUT);
  digitalWrite(relay3, LOW);
  pinMode(relay4, OUTPUT);
  digitalWrite(relay4, LOW);
}

void loop() {
  // Handle client requests
  server.handleClient();
}

void handleRoot() {
  String HTML = R"=====(
<!DOCTYPE html>
<html lang="en">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>ESP32 Web Server</title>
<style>
  body { font-family: 'Arial', sans-serif; margin: 0; padding: 0; background-color: #f0f0f0; color: #333; }
  .container { max-width: 600px; margin: 50px auto; padding: 20px; background-color: #fff; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }
  h1 { color: #0066ff; text-align: center; }
  ul { list-style-type: none; padding: 0; }
  li a { display: block; color: #333; background-color: #e7e7e7; padding: 10px 20px; text-decoration: none; margin: 10px 0; text-align: center; }
  li a:hover { background-color: #ddd; }
</style>
</head>
<body>
<div class="container">
  <h1>Welcome to the ESP32 Web Server</h1>
  <ul>
    <li><a href='/sensor-data'>Sensor Data</a></li>
    <li><a href='/control'>Control Panel</a></li>
  </ul>
</div>
</body>
</html>
)=====";
  server.send(200, "text/html", HTML);
}

void handleSensorData() {
  String sensorDataHTML = R"=====(
<!DOCTYPE html>
<html lang="en">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Sensor Data</title>
<style>
  body { font-family: 'Arial', sans-serif; margin: 0; padding: 0; background-color: #f0f0f0; color: #333; }
  .container { max-width: 600px; margin: 50px auto; padding: 20px; background-color: #fff; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); text-align: center; }
  h1 { color: #0066ff; }
  p { margin: 20px 0; }
  a { color: #333; padding: 10px 20px; text-decoration: none; background-color: #e7e7e7; }
  a:hover { background-color: #ddd; }
</style>
</head>
<body>
<div class="container">
  <h1>Sensor Data</h1>
  <p>Temperature: --Â°C</p>
  <p>Humidity: --%</p>
  <p><a href='/'>Home</a></p>
</div>
</body>
</html>
)=====";
  server.send(200, "text/html", sensorDataHTML);
}

void handleControl() {
  String controlHTML = R"=====(
<!DOCTYPE html>
<html lang="en">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Control Panel</title>
<style>
  body { font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px; }
  .container { max-width: 800px; margin: auto; background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
  h1 { color: #333; text-align: center; margin-bottom: 20px; }
  .btn { display: inline-block; padding: 10px 20px; margin: 5px; background-color: #007bff; color: #ffffff; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s ease; }
  .btn:hover { background-color: #0056b3; }
  .btn:active { background-color: #004299; }
  .footer { text-align: center; margin-top: 20px; }
  a, a:visited { color: #007bff; text-decoration: none; }
  a:hover { text-decoration: underline; }
</style>
</head>
<body>
<div class="container">
  <h1>Control Panel</h1>
  <button class="btn" onclick="location.href='/relay1-toggle'">Toggle Relay 1</button>
  <button class="btn" onclick="location.href='/relay2-toggle'">Toggle Relay 2</button>
  <button class="btn" onclick="location.href='/relay3-toggle'">Toggle Relay 3</button>
  <button class="btn" onclick="location.href='/relay4-toggle'">Toggle Relay 4</button>
  <div class="motor-controls">
    <button class="btn" onclick="location.href='/motor-left'">Turn Motor Left</button>
    <button class="btn" onclick="location.href='/motor-right'">Turn Motor Right</button>
    <button class="btn" onclick="location.href='/motor-off'">Turn Motor Off</button>
  </div>
  <div class="footer"><a href='/'>Home</a></div>
</div>
</body>
</html>
)=====";
  server.send(200, "text/html", controlHTML);
}

void handleToggleRelay1() {
  digitalWrite(relay1, !digitalRead(relay1));
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}

void handleToggleRelay2() {
  digitalWrite(relay2, !digitalRead(relay2));
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}

void handleToggleRelay3() {
  digitalWrite(relay3, !digitalRead(relay3));
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}

void handleToggleRelay4() {
  digitalWrite(relay4, !digitalRead(relay4));
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}


void handleMotorLeft() {
  digitalWrite(relay1, HIGH);
  digitalWrite(relay2, LOW);
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}

void handleMotorRight() {
  digitalWrite(relay1, LOW);
  digitalWrite(relay2, HIGH);
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}

void handleMotorOff() {
  digitalWrite(relay1, HIGH);
  digitalWrite(relay2, HIGH);
  server.sendHeader("Location", "/control", true);
  server.send(302, "text/plain", "");
}
